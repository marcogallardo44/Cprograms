INTEGERSET.H

#include "stdafx.h"
#include <iostream>

// Lab 2: IntegerSet.h
// Header file for class IntegerSet
#ifndef INTEGER_SET_H
#define INTEGER_SET_H
class IntegerSet
{
public:
	// default constructor
	IntegerSet()
	{
		/* Write call to emptySet */
		emptySet();
	} // end IntegerSet constructor

	IntegerSet(int[], int); // constructor that takes an initial set
	IntegerSet unionOfSets(const IntegerSet&);
	/* Write a member funcion prototype for intersectionOfSets */
	IntegerSet intersectionOfSets(const IntegerSet&);
	void emptySet(); // set all elements of set to 0
	void inputSet(); // read values from user
	void insertElement(int);
	/* Write a member function prototype for deleteElement */
	void deleteElement(int);
	void printSet() const;
	/* Write a member function prototype for isEqualTo */
	bool isEqualTo(const IntegerSet &r) const;

private:
	int set[101]; // range of 0 - 100
				  // determines a valid entry to the set
	int validEntry(int x) const
	{
		return (x >= 0 && x <= 100);
	} // end function validEntry
}; // end class IntegerSet
#endif

INTEGERSET.CPP

// Lab 2: IntegerSet.cpp
// Member-function definitions for class IntegerSet.
#include "stdafx.h"
#include <iostream>
#include <iomanip>
using namespace std;

/* Write include directive for IntegerSet.h here */
#include "IntegerSet.h"

// constructor creates a set from array of integers
IntegerSet::IntegerSet(int array[], int size)
{
	emptySet();

	for (int i = 0; i < size; i++)
		insertElement(array[i]);
} // end IntegerSet constructor

  /* Write a definition for emptySet */
void IntegerSet::emptySet()
{
	int a[] = { 0 };
}

// input a set from the user
void IntegerSet::inputSet()
{
	int number;

	do
	{
		cout << "Enter an element (-1 to end): ";
		cin >> number;

		if (validEntry(number))
			set[number] = 1;
		else if (number != -1)
			cerr << "Invalid Element\n";
	} while (number != -1); // end do...while
	cout << "Entry complete\n";
} // end function inputSet

  // prints the set to the output stream
void IntegerSet::printSet() const
{
	int x = 1;
	bool empty = true; // assume set is empty

	cout << '{';

	for (int u = 0; u < 101; u++)
	{
		if (set[u])
		{
			cout << setw(4) << u << (x % 10 == 0 ? "\n" : "");
			empty = false; // set is not empty
			++x;
		} // end if
	} // end for

	if (empty)
		cout << setw(4) << "---"; // display an empty set

	cout << setw(4) << "}" << '\n';
} // end function printSet

  // returns the union of two sets
IntegerSet IntegerSet::unionOfSets(const IntegerSet &r)
{
	IntegerSet temp;

	// if element is in either set, add to temporary set
	for (int n = 0; n < 101; n++)
		if (set[n] == 1 || r.set[n] == 1)
			temp.set[n] = 1;

	return temp;
} // end function unionOfSets

  /* Write definition for intersectionOfSets */
IntegerSet IntegerSet::intersectionOfSets(const IntegerSet &r)
{
	IntegerSet temp;
	for (int n=0; n < 101; n++)
		if (set[n] == 1 || r.set[n] == 1)
			temp.set[n] = 1;

	return temp;
}

// insert a new integer into this set
void IntegerSet::insertElement(int k)
{
	if (validEntry(k))
		set[k] = 1;
	else
		cerr << "Invalid insert attempted!\n";
} // end function insertElement

  /* Write definition for deleteElement */
void IntegerSet::deleteElement(int k)
{
	if (validEntry(k))
		set[k] = 0;
	else
		cerr << "Invalid insert attempted!\n";
}

/* Write definition for isEqualTo */


// determines if two sets are equal
bool IntegerSet::isEqualTo(const IntegerSet &r) const
{
	for (int v = 0; v < 101; v++)
		if (set[v] != r.set[v])
			return false; // sets are not-equal

	return true; // sets are equal
} // end function isEqualTo
INTEGERSETTEST.CPP

// ConsoleApplication1.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include "IntegerSet.h" // IntegerSet class definition

using namespace std;

int main()
{
	IntegerSet a;
	IntegerSet b;
	IntegerSet c;
	IntegerSet d;

	cout << "Enter set A:\n";
	a.inputSet();
	cout << "\nEnter set B:\n";
	b.inputSet();

	/* Write call to unionOfSets for object a, passing
	b as argument and assigning the result to c */
	c = a.unionOfSets(b);
	

	/* Write call to intersectionOfSets for object a,
	passing b as argument and assigning the result to d */
	d = a.intersectionOfSets(b);

	cout << "\nUnion of A and B is:\n";
	c.printSet();
	cout << "Intersection of A and B is:\n";
	d.printSet();

	if (a.isEqualTo(b))
		cout << "Set A is equal to set B\n";
	else
		cout << "Set A is not equal to set B\n";

	cout << "\nInserting 77 into set A...\n";

	a.insertElement(77);
	cout << "Set A is now:\n";
	a.printSet();
	cout << "\nDeleting 77 from set A...\n";
	a.deleteElement(77);
	cout << "Set A is now:\n";
	a.printSet();

	const int arraySize = 10;
	int intArray[arraySize] = { 25, 67, 2, 9, 99, 105, 45, -5, 100, 1 };
	IntegerSet e(intArray, arraySize);

	cout << "\nSet e is:\n";
	e.printSet();

	cout << endl;

	system("pause");
	return 0;
}



