HUGEINT.H

// Lab 2: Hugeint.h
// HugeInt class definition.
#ifndef HUGEINT_H
#define HUGEINT_H

#include <iostream>
#include <iostream>
using namespace std;

class HugeInt
{
	friend ostream &operator<<(ostream &, const HugeInt &);
public:
	HugeInt(long = 0); // conversion/default constructor
	HugeInt(const char *); // conversion constructor

	// addition operator; HugeInt + HugeInt
	HugeInt operator+(const HugeInt &) const;
	
	// addition operator; HugeInt + int
	HugeInt operator+(int) const;
	
	// addition operator;
	// HugeInt + string that represents large integer value
	HugeInt operator+(const char *) const;
	
	/* Write prototypes for the six relational and equality operators */
	bool operator==(const HugeInt& rhs) const;
	bool operator!=(const HugeInt& rhs) const;
	bool operator<(const HugeInt& rhs) const;
	bool operator<=(const HugeInt& rhs) const;
	bool operator>(const HugeInt& rhs) const;
	bool operator>=(const HugeInt& rhs) const;
	
	int getLength() const;
private:
	short integer[30];
}; // end class HugeInt
#endif

---------------------------------------------------------------------------------------

HUGEINT.CPP

// Lab 2: Hugeint.cpp
// HugeInt member-function and friend-function definitions.

#include "stdafx.h"
#include <iostream>
#include <cctype> // isdigit function prototype
#include <cstring> // strlen function prototype
using namespace std;

#include "Hugeint.h" // HugeInt class definition

// default constructor; conversion constructor that converts
// a long integer into a HugeInt object
HugeInt::HugeInt(long value)
{
	// initialize array to zero
	for (int i = 0; i <= 29; i++)
		integer[i] = 0;

	// place digits of argument into array
	for (int j = 29; value != 0 && j >= 0; j--)
	{
		integer[j] = value % 10;
		value /= 10;
	} // end for
} // end HugeInt default/conversion constructor

  // conversion constructor that converts a character string
  // representing a large integer into a HugeInt object
HugeInt::HugeInt(const char *string)
{
	// initialize array to zero
	for (int i = 0; i <= 29; i++)
		integer[i] = 0;

	// place digits of argument into array
	int length = strlen(string);

	for (int j = 30 - length, k = 0; j <= 29; j++, k++)

		if (isdigit(string[k]))
			integer[j] = string[k] - '0';
} // end HugeInt conversion constructor

  // get function calculates length of integer
int HugeInt::getLength() const
{
	int i;

	for (i = 0; i <= 29; i++)
		if (integer[i] != 0)
			break; // break when first digit is reached

	return 30 - i; // length is from first digit (at i) to end of array
} // end function getLength

  // addition operator; HugeInt + HugeInt
HugeInt HugeInt::operator+(const HugeInt &op2) const
{
	HugeInt temp; // temporary result
	int carry = 0;
	
	for (int i = 29; i >= 0; i--)
	{
		temp.integer[i] =
			integer[i] + op2.integer[i] + carry;
	
		// determine whether to carry a 1
		if (temp.integer[i] > 9)
		{
			temp.integer[i] %= 10; // reduce to 0-9
			carry = 1;
		} // end if
		else // no carry
			carry = 0;
	} // end for

	return temp; // return copy of temporary object
} // end function operator+

  // addition operator; HugeInt + int
HugeInt HugeInt::operator+(int op2) const
{
	// convert op2 to a HugeInt, then invoke
	// operator+ for two HugeInt objects
	return *this + HugeInt(op2);
} // end function operator+

  // addition operator;
  // HugeInt + string that represents large integer value
HugeInt HugeInt::operator+(const char *op2) const
{
	// convert op2 to a HugeInt, then invoke
	// operator+ for two HugeInt objects
	return *this + HugeInt(op2);
} // end function operator+

  // equality operator; HugeInt == HugeInt
  /* Write a definition for the == operator */
bool HugeInt::operator==(const HugeInt& rhs) const
{
	for (int i = 29; i >= 0; i--)
	{
		if (integer[i] != rhs.integer[i])
			return false;
	}
	return true;
}
  // inequality operator; HugeInt != HugeInt
  /* Write a definition for the != operator
  by calling the == operator */
bool HugeInt::operator!=(const HugeInt& rhs) const
{
	
		return !(*this == rhs);
}
  // less than operator; HugeInt < HugeInt
  /* Write a definition for the < operator */
bool HugeInt::operator<(const HugeInt& rhs) const
{
	for (int i = 29; i >= 0; i--)
	{
		if (integer[i] < rhs.integer[i])
			return true;
		if (integer[i] > rhs.integer[i])
			return false;
	}
	return false;
}
  // less than or equal operator; HugeInt <= HugeInt
  /* Write a definition for the <= operator
  by calling the < and == operators */
bool HugeInt::operator<=(const HugeInt& rhs) const
{
	return (*this == rhs || *this < rhs);
}
  // greater than operator; HugeInt > HugeInt
  /* Write a definition for the > operator
  by calling the <= operator */
bool HugeInt::operator>(const HugeInt& rhs) const
{
	return !(*this <= rhs);
}
  // greater than or equal operator; HugeInt >= HugeInt
  /* Write a definition for the >= operator
  by calling the > and == operators */
bool HugeInt::operator>=(const HugeInt& rhs) const
{
	return (*this == rhs || *this > rhs);
}
  // overloaded output operator
ostream& operator<<(ostream &output, const HugeInt &num)
{
	int i;
	
	for (i = 0; (num.integer[i] == 0) && (i <= 29); i++)
		; // skip leading zeros
	if (i == 30)
		output << 0;
	else
	
		for (; i <= 29; i++)
			output << num.integer[i];
	return output;
} // end function operator<<

---------------------------------------------------------------------------

HUGEINTTEST.CPP

// ConsoleApplication2.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>

using namespace std;
#include "Hugeint.h"

int main()
{
	
		HugeInt n1(7654321);
		HugeInt n2(7891234);
		HugeInt n3("99999999999999999999999999999");
		HugeInt n4("1");
		HugeInt result;
		
		cout << "n1 is " << n1 << "\nn2 is " << n2
			<< "\nn3 is " << n3 << "\nn4 is " << n4
			<< "\nresult is " << result << "\n\n";
		
		// test relational and equality operators
		if (n1 == n2)
			cout << "n1 equals n2" << endl;
		
		if (n1 != n2)
			cout << "n1 is not equal to n2" << endl;
		
		if (n1 < n2)
			cout << "n1 is less than n2" << endl;
		
		if (n1 <= n2)
			cout << "n1 is less than or equal to n2" << endl;
		
		if (n1 > n2)
			cout << "n1 is greater than n2" << endl;
		
		if (n1 >= n2)
			cout << "n1 is greater than or equal to n2" << endl; 
		
		result = n1 + n2;
		cout << n1 << " + " << n2 << " = " << result << "\n\n";
		
		cout << n3 << " + " << n4 << "\n= " << (n3 + n4) << "\n\n";
		
		result = n1 + 9;
		cout << n1 << " + " << 9 << " = " << result << endl;
		
		result = n2 + "10000";
		cout << n2 << " + " << "10000" << " = " << result << endl;


	system("pause");
    return 0;
}

