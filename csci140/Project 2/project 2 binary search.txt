// BinarySearch.cpp, Marco Gallardo, c++ Language and Objects
//Project #2 Question 5 b). MS Visual Studio 2017, 10/30/17

#include "stdafx.h"
#include <iostream>
#include <algorithm>
#include <array>
#include <ctime>
#include <random>


using namespace std;
//display array elements from index low through index high
template<typename T, size_t size>
void displayElements(const array<T, size>& items, size_t low, size_t high)
{
	for (size_t i{ 0 }; i < items.size() && i < low; ++i)
	{
		cout << "  ";//display spaces for alignment
	}
	for (size_t i{ low }; i < items.size() && i <= high; ++i)
	{
		cout << items[i] << " ";//display elemnt
	}
	cout << endl;
}

//perfom a bindary search on the data
int binarySearch(int L[], int x, int first, int last)
{
	
	if (last >= first)  //first > last)
	{
		//return -1;
		int middle = (first + last) / 2;

		if (x == L[middle])
			return middle;
		else if (x < L[middle])
			return binarySearch(L, x, first, middle - 1);
		else //if(x > L[middle])
			return binarySearch(L, x, middle + 1, last);
	}
	else
		return -1;//(first + 1);    // failed to find key
}

int main()
{
	//use the default random-number generation engine to produce
	//uniformly distributed pseudorandom int values from 10 to 99
	
	srand(time(0));
	int values[15];
	const int size = 15;
	
	default_random_engine engine{
		static_cast<unsigned int>(time(nullptr)) };
	uniform_int_distribution<unsigned int> randomInt{ 10,99 };

	const size_t arraySize{ 15 };//size of array
	array<int, arraySize> arrayToSearch; //create array

										 //fill arrayToSeatch with random values
	for (int &item : arrayToSearch) {
		item = randomInt(engine);
	}

	sort(arrayToSearch.begin(), arrayToSearch.end()); // sory the array
	
	for (int i = 0; i < size; i++)
	{
		values[i] = arrayToSearch[i];
	}
	
	 //create array
	
	
	
	int low = 0;//low index of elements to search
	int high = size - 1 ;//high index of elements to search
										 //fill arrayToSeatch with random values


													  //display arrayToSearch's values
	displayElements(arrayToSearch, 0, arrayToSearch.size() - 1);

	//get input from user
	cout << "\nPlease enter an integer value (-1 to quit): ";
	int searchKey; //value to locate
	cin >> searchKey; //read an int from user
	cout << endl;

	//repeatedly input an integer; -1 terminates the program
	while (searchKey != -1)
	{
		//use binary search to find integer
		int position = binarySearch(values, searchKey, low , high );

		//return value of -1 indicates integer was not found
		if (position == -1)
		{
			cout << "The integer " << searchKey << " was not found. \n";
		}
		else
		{
			cout << "The integer " << searchKey << " was found in position " << position << ".\n";
		}
		//get input from user
		cout << "\n\nPlease enter an integer value (-1 to quit): ";
		cin >> searchKey; //read an int from user
		cout << endl;


	}





	system("pause");
	return 0;
}

//REPORT
/*This one was tough because i didnt know i had to make
the function recursive, and the functions in the book
use templates, rather than just making arrays and such.
So i had to figure out a way to do it without using a template
for the actaul function. Finally figured it out, but it doesnt
print each array, not sure if you wanted it to do that or not.
But basically the function checks if the number you entered
is in the middle of the array, if not it checks if its smaller
than or bigger than the middle number, cuts out the half that it 
is not, then repeats itself.*/