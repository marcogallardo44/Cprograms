ACCOUNT.H

#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;

#ifndef ACCOUNT_H
#define ACCOUNT_H

class Account
{
public:
	Account(double); // constructor initializes balance
					 /* Write a function prototype for virtual function credit */
	virtual void credit(double);
					 /* Write a function prototype for virtual function debit */
	virtual bool debit(double);
	void setBalance(double); // sets the account balance
	double getBalance(); // return the account balance
private:
	double balance; // data member that stores the balance 
}; // end class Account 
#endif

-----------------------------------------------------------------------------------------------
ACCOUNT.CPP
#include "stdafx.h"
#include <iostream>
#include <string>
#include "Account.h"
using namespace std;

// Lab 1: Account.cpp 
// Member-function definitions for class Account. 

// Account constructor initializes data member balance
Account::Account(double initialBalance)
{
	// if initialBalance is greater than or equal to 0.0, set this value 
	// as the balance of the Account 
	if (initialBalance >= 0.0)
		balance = initialBalance;
	else // otherwise, output message and set balance to 0.0
	{
		cout << "Error: Initial balance cannot be negative." << endl;
		balance = 0.0;
	} // end if...else 
} // end Account constructor 

  // credit (add) an amount to the account balance
void Account::credit(double amount)
{
	balance = balance + amount; // add amount to balance
} // end function credit

  // debit (subtract) an amount from the account balance 
  // return bool indicating whether money was debited
bool Account::debit(double amount)
{
	if (amount > balance) // debit amount exceeds balance 
	{
		cout << "Debit amount exceeded account balance." << endl;
		return false;
	} // end if
	else // debit amount does not exceed balance 
	{
		balance = balance - amount;
		return true;
	} // end else 
} // end function debit 

  // set the account balance 
void Account::setBalance(double newBalance)
{
	balance = newBalance;
} // end function setBalance 

  // return the account balance 
double Account::getBalance()
{
	return balance;
} // end function getBalance

  // Lab 1: SavingsAccount.h 
  // Definition of SavingsAccount class. 

-----------------------------------------------------------------------------------------------
CHECKINGACCOUNT.H
#include "stdafx.h"
#include <iostream>
#include <string>
#include "Account.h" // Account class definition
using namespace std;


#ifndef CHECKING_H
#define CHECKING_H 

class CheckingAccount : public Account

{
public:
	// constructor initializes balance and transaction fee 
	CheckingAccount(double, double);
	/* Write a function prototype for virtual function credit,
	which will redefine the inherited credit function */
	void credit(double);
	/* Write a function prototype for virtual function debit
	which will redefine the inherited debit function */
	bool debit(double);

private:
	double transactionFee; // fee charged per transaction
						   // utility function to charge fee
	void chargeFee();
}; // end class CheckingAccount 
#endif

-----------------------------------------------------------------------------------------------
CHECKINGACCOUNT.CPP
#include "stdafx.h"
#include <iostream>
#include <string>
using namespace std;
#include "CheckingAccount.h"


// constructor initializes balance and transaction fee
CheckingAccount::CheckingAccount(double initialBalance, double fee)
	: Account(initialBalance) // initialize base class
{
	transactionFee = (fee < 0.0) ? 0.0 : fee; // set transaction fee 
} // end CheckingAccount constructor 

  // credit (add) an amount to the account balance and charge fee
void CheckingAccount::credit(double amount)
{
	Account::credit(amount); // always succeeds
	chargeFee();
} // end function credit 

  // debit (subtract) an amount from the account balance and charge fee 

bool CheckingAccount::debit(double amount)

{
	bool success = Account::debit(amount); // attempt to debit 
	if (success) // if money was debited, charge fee and return true 

	{
		chargeFee();
		return true;
	} // end if
	else // otherwise, do not charge fee and return false 
		return false;
} // end function debi

  // subtract transaction fee 
void CheckingAccount::chargeFee()
{
	Account::setBalance(getBalance() - transactionFee);
	cout << "$" << transactionFee << " transaction fee charged." << endl;
} // end function chargeFee



-----------------------------------------------------------------------------------------------
SAVINGSACCOUNT.H
#include "stdafx.h"
#include <iostream>
#include <string>
#include "Account.h"
using namespace std;





#ifndef SAVINGS_H 
#define SAVINGS_H

class SavingsAccount : public Account
{
public:
	// constructor initializes balance and interest rate 
	SavingsAccount(double, double);


	double calculateInterest(); // determine interest owed 
private:
	double interestRate; // interest rate (percentage) earned by account 
}; // end class SavingsAccount

#endif


-----------------------------------------------------------------------------------------------
SAVINGSACCOUNT.CPP
#include "stdafx.h"
#include <iostream>
#include <string>
#include "SavingsAccount.h"
using namespace std;

// constructor initializes balance and interest rate
SavingsAccount::SavingsAccount(double initialBalance, double rate)
	: Account(initialBalance) // initialize base class 
{
	interestRate = (rate < 0.0) ? 0.0 : rate; // set interestRate
} // end SavingsAccount constructor

  // return the amount of interest earned

double SavingsAccount::calculateInterest()
{
	return getBalance() * interestRate;
} // end function calculateInterest







-----------------------------------------------------------------------------------------------
TEST.CPP
// ConsoleApplication18.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include <string>
#include <vector>
#include<iomanip>
using namespace std;

#include "Account.h" // Account class definition
#include "SavingsAccount.h" // SavingsAccount class definition 
#include "CheckingAccount.h" // CheckingAccount class definition 


int main()
{
	// create vector accounts
	/* Write declarations for a vector of four pointers
	to Account objects, called accounts */
	vector <Account*>accounts(4);

	// initialize vector with Accounts
	accounts[0] = new SavingsAccount(25.0, .03);
	accounts[1] = new CheckingAccount(80.0, 1.0);
	accounts[2] = new SavingsAccount(200.0, .015);
	accounts[3] = new CheckingAccount(400.0, .5);

	cout << fixed << setprecision(2);

	// loop through vector, prompting user for debit and credit amounts 
	for (size_t i = 0; i < accounts.size(); i++)
	{
		cout << "Account " << i + 1 << " balance: $"
			<< /* Call the getBalance function through Account pointer i */
			accounts[i]->getBalance();

		double withdrawalAmount = 0.0;
		cout << "\nEnter an amount to withdraw from Account " << i + 1
			<< ": ";
		cin >> withdrawalAmount;
		/* Call the debit function through Account pointer i */
		accounts[i]->debit(withdrawalAmount);

		double depositAmount = 0.0;
		cout << "Enter an amount to deposit into Account " << i + 1
			<< ": ";
		cin >> depositAmount;
			/* Call the credit function through Account pointer i */
		accounts[i]->credit( depositAmount);

			// downcast pointer
		SavingsAccount *savingsAccountPtr = dynamic_cast <SavingsAccount*> (accounts[i]);
			/* Write a dynamic_cast operation to to attempt to downcast
			Account pointer i to a SavingsAccount pointer */


			// if Account is a SavingsAccount, calculate and add interest 
				if ( /* Write a test to determine if savingsAccountPtr isn't 0 */
					savingsAccountPtr != 0)
				{
					double interestEarned = /* Call member function calculateInterest
											through savingsAccountPtr */ savingsAccountPtr->calculateInterest();
					cout << "Adding $" << interestEarned << " interest to Account "
						<< i + 1 << " (a SavingsAccount)" << endl;
					/* Use the credit function to credit interestEarned to
					the SavingsAccount pointed to by savingsAccountPtr*/
					savingsAccountPtr->credit(interestEarned);
				} // end if 


			cout << "Updated Account " << i + 1 << " balance: $"
				<< /* Call the getBalance function through Account pointer i */
				accounts[i]->getBalance()
				<< "\n\n";
	} // end for 





	system("pause");
    return 0;
}



-----------------------------------------------------------------------------------------------



-----------------------------------------------------------------------------------------------